# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestTest:
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    # def teardown_method(self, method):
    #   self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def test_test(self):
        # Test name: test
        # Step # | name | target | value
        # 1 | open | /aulas/ |
        self.driver.get("https://douglasdcm.github.io/aulas/")
        # 2 | setWindowSize | 1024x555 |
        self.driver.set_window_size(1024, 555)
        # 3 | click | id=username |
        self.driver.find_element(By.ID, "username").click()
        # 4 | type | id=username | name
        self.driver.find_element(By.ID, "username").send_keys("name")
        # 5 | type | id=password | passord
        self.driver.find_element(By.ID, "password").send_keys("passord")
        # 6 | type | id=email | myemail@email.com
        self.driver.find_element(By.ID, "email").send_keys("myemail@email.com")
        # 7 | click | id=bio |
        self.driver.find_element(By.ID, "bio").click()
        # 8 | type | id=bio | mybio\nmybio
        self.driver.find_element(By.ID, "bio").send_keys("mybio\\nmybio")
        # 9 | select | id=country | label=Australia
        dropdown = self.driver.find_element(By.ID, "country")
        dropdown.find_element(By.XPATH, "//option[. = 'Australia']").click()
        # 10 | mouseDownAt | id=country | -0.5,-0.921875
        element = self.driver.find_element(By.ID, "country")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        # 11 | mouseMoveAt | id=country | -0.5,-0.921875
        element = self.driver.find_element(By.ID, "country")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 12 | mouseUpAt | id=country | -0.5,-0.921875
        element = self.driver.find_element(By.ID, "country")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        # 13 | click | id=age |
        self.driver.find_element(By.ID, "age").click()
        # 14 | type | id=age | 65
        self.driver.find_element(By.ID, "age").send_keys("65")
        # 15 | click | id=birthdate |
        self.driver.find_element(By.ID, "birthdate").click()
        # 16 | click | id=birthdate |
        self.driver.find_element(By.ID, "birthdate").click()
        # 17 | type | id=birthdate | 2025-08-28
        self.driver.find_element(By.ID, "birthdate").send_keys("2025-08-28")
        # 18 | click | id=submit-btn |
        self.driver.find_element(By.ID, "submit-btn").click()
        # 19 | assertAlert | Form would be submitted here |
        alert = self.driver.switch_to.alert
        assert alert.text == "Form would be submitted here"
        alert.accept()

        # 20 | click | id=interest-tech |
        self.driver.find_element(By.ID, "interest-tech").click()
        # 21 | click | id=interest-tech |
        self.driver.find_element(By.ID, "interest-tech").click()
        # 22 | click | id=interest-sports |
        self.driver.find_element(By.ID, "interest-sports").click()
        # 23 | click | id=interest-music |
        self.driver.find_element(By.ID, "interest-music").click()
        # 24 | click | id=gender-female |
        self.driver.find_element(By.ID, "gender-female").click()
        # 25 | click | id=terms |
        self.driver.find_element(By.ID, "terms").click()
        # 26 | click | id=simple-btn |
        self.driver.find_element(By.ID, "simple-btn").click()
        # 27 | assertAlert | Simple button was clicked! |
        alert = self.driver.switch_to.alert
        assert alert.text == "Simple button was clicked!"
        alert.accept()
        # 28 | click | id=alert-btn |
        self.driver.find_element(By.ID, "alert-btn").click()
        # 29 | assertAlert | This is a JavaScript alert! |
        assert self.driver.switch_to.alert.text == "This is a JavaScript alert!"
        # 31 | click | id=confirm-btn |
        self.driver.find_element(By.ID, "confirm-btn").click()
        # 32 | assertConfirmation | Do you want to proceed? |
        assert self.driver.switch_to.alert.text == "Do you want to proceed?"
        # 33 | webdriverChooseOkOnVisibleConfirmation |  |
        self.driver.switch_to.alert.accept()
        # 34 | assertAlert | You clicked: OK |
        assert self.driver.switch_to.alert.text == "You clicked: OK"
        # 36 | click | id=prompt-btn |
        self.driver.find_element(By.ID, "prompt-btn").click()
        # 37 | assertPrompt | Please enter your name: |
        assert self.driver.switch_to.alert.text == "Please enter your name:"
        # 38 | webdriverAnswerOnVisiblePrompt | douglas |
        alert = self.driver.switch_to.alert
        alert.send_keys("douglas")
        alert.accept()
        # 39 | assertAlert | Hello, douglas! |
        assert self.driver.switch_to.alert.text == "Hello, douglas!"
        # 40 | click | id=new-tab-btn |
        self.vars["window_handles"] = self.driver.window_handles
        # 41 | storeWindowHandle | root |
        self.driver.find_element(By.ID, "new-tab-btn").click()
        # 42 | selectWindow | handle=${win9627} |
        self.vars["win9627"] = self.wait_for_window(2000)
        # 43 | close |  |
        self.vars["root"] = self.driver.current_window_handle
        # 44 | selectWindow | handle=${root} |
        self.driver.switch_to.window(self.vars["win9627"])
        # 45 | click | css=.btn-style:nth-child(1) |
        self.driver.close()
        # 46 | click | css=.btn-style:nth-child(2) |
        self.driver.switch_to.window(self.vars["root"])
        # 47 | click | css=.btn-style:nth-child(3) |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-style:nth-child(1)").click()
        # 48 | click | id=show-hidden-btn |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-style:nth-child(2)").click()
        # 49 | click | id=hidden-element |
        self.driver.find_element(By.CSS_SELECTOR, ".btn-style:nth-child(3)").click()
        # 50 | assertText | id=hidden-element | This element was hidden and now is visible!
        self.driver.find_element(By.ID, "show-hidden-btn").click()
        # 51 | click | id=add-element-btn |
        self.driver.find_element(By.ID, "hidden-element").click()
        # 52 | click | css=div:nth-child(1) |
        assert (
            self.driver.find_element(By.ID, "hidden-element").text
            == "This element was hidden and now is visible!"
        )
        # 53 | assertText | css=div:nth-child(1) | New element added at 7:26:10 PM
        self.driver.find_element(By.ID, "add-element-btn").click()
        # 54 | click | id=change-text-btn |
        self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1)").click()
        # 55 | click | id=changeable-text |
        assert (
            self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1)").text
            == "New element added at 7:26:10 PM"
        )
        # 56 | assertText | id=changeable-text | Text changed at 7:26:26 PM
        self.driver.find_element(By.ID, "change-text-btn").click()
        # 57 | click | id=class-toggle-element |
        self.driver.find_element(By.ID, "changeable-text").click()
        # 58 | click | id=toggle-class-btn |
        assert (
            self.driver.find_element(By.ID, "changeable-text").text == "Text changed at 7:26:26 PM"
        )
        # 59 | click | id=toggle-class-btn |
        self.driver.find_element(By.ID, "class-toggle-element").click()
        # 60 | click | id=toggle-class-btn |
        self.driver.find_element(By.ID, "toggle-class-btn").click()
        # 61 | click | id=toggle-class-btn |
        self.driver.find_element(By.ID, "toggle-class-btn").click()
        # 62 | click | id=toggle-class-btn |
        self.driver.find_element(By.ID, "toggle-class-btn").click()
        # 63 | click | id=toggle-class-btn |
        self.driver.find_element(By.ID, "toggle-class-btn").click()
        # 64 | click | id=ajax-btn |
        self.driver.find_element(By.ID, "toggle-class-btn").click()
        # 65 | click | id=ajax-content |
        self.driver.find_element(By.ID, "toggle-class-btn").click()
        # 66 | assertText | id=ajax-content | AJAX content loaded at 7:26:54 PM
        self.driver.find_element(By.ID, "ajax-btn").click()
        # 67 | select | id=simple-dropdown | label=Option 1
        self.driver.find_element(By.ID, "ajax-content").click()
        # 68 | select | id=simple-dropdown | label=Option 2
        assert (
            self.driver.find_element(By.ID, "ajax-content").text
            == "AJAX content loaded at 7:26:54 PM"
        )
        # 69 | addSelection | id=multi-select | label=Green
        dropdown = self.driver.find_element(By.ID, "simple-dropdown")
        dropdown.find_element(By.XPATH, "//option[. = 'Option 1']").click()
        # 70 | addSelection | id=multi-select | label=Yellow
        dropdown = self.driver.find_element(By.ID, "simple-dropdown")
        dropdown.find_element(By.XPATH, "//option[. = 'Option 2']").click()
        # 71 | click | id=add-option-btn |
        dropdown = self.driver.find_element(By.ID, "multi-select")
        dropdown.find_element(By.XPATH, "//option[. = 'Green']").click()
        # 72 | click | id=add-option-btn |
        dropdown = self.driver.find_element(By.ID, "multi-select")
        dropdown.find_element(By.XPATH, "//option[. = 'Yellow']").click()
        # 73 | click | id=add-option-btn |
        self.driver.find_element(By.ID, "add-option-btn").click()
        # 74 | select | id=dynamic-dropdown | label=Dynamic Option 2
        self.driver.find_element(By.ID, "add-option-btn").click()
        # 75 | click | id=add-row-btn |
        self.driver.find_element(By.ID, "add-option-btn").click()
        # 76 | click | css=tr:nth-child(4) > td:nth-child(2) |
        dropdown = self.driver.find_element(By.ID, "dynamic-dropdown")
        dropdown.find_element(By.XPATH, "//option[. = 'Dynamic Option 2']").click()
        # 77 | assertText | css=tr:nth-child(4) > td:nth-child(2) | New User 4
        self.driver.find_element(By.ID, "add-row-btn").click()
        # 78 | click | id=remove-row-btn |
        self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
        # 79 | click | css=.tooltip |
        assert (
            self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").text
            == "New User 4"
        )
        # 80 | click | id=show-popover-btn |
        self.driver.find_element(By.ID, "remove-row-btn").click()
        # 81 | click | id=popover-content |
        self.driver.find_element(By.CSS_SELECTOR, ".tooltip").click()
        # 82 | click | id=popover-content |
        self.driver.find_element(By.ID, "show-popover-btn").click()
        # 83 | assertText | id=popover-content | This is a popover content that appears when the button is clicked.
        self.driver.find_element(By.ID, "popover-content").click()
        # 84 | click | id=file-upload |
        self.driver.find_element(By.ID, "popover-content").click()
        # 85 | type | id=file-upload | C:\fakepath\default.pa
        assert (
            self.driver.find_element(By.ID, "popover-content").text
            == "This is a popover content that appears when the button is clicked."
        )
        # 86 | click | id=multi-file-upload |
        self.driver.find_element(By.ID, "file-upload").click()
        # 87 | type | id=multi-file-upload | C:\fakepath\default.pa
        self.driver.find_element(By.ID, "file-upload").send_keys("C:\\fakepath\\default.pa")
        # 88 | click | id=load-iframe-btn |
        self.driver.find_element(By.ID, "multi-file-upload").click()
        # 89 | selectFrame | index=0 |
        self.driver.find_element(By.ID, "multi-file-upload").send_keys("C:\\fakepath\\default.pa")
        # 90 | click | css=button |
        self.driver.find_element(By.ID, "load-iframe-btn").click()
        # 91 | assertAlert | Button inside iframe clicked! |
        self.driver.switch_to.frame(0)
        # 92 | click | css=h3 |
        self.driver.find_element(By.CSS_SELECTOR, "button").click()
        # 93 | click | css=h3 |
        assert self.driver.switch_to.alert.text == "Button inside iframe clicked!"
        # 94 | click | css=h3 |
        self.driver.find_element(By.CSS_SELECTOR, "h3").click()
        # 95 | doubleClick | css=h3 |
        self.driver.find_element(By.CSS_SELECTOR, "h3").click()
        # 96 | verifyText | css=h3 | IFrame Content Loaded
        self.driver.find_element(By.CSS_SELECTOR, "h3").click()
        # 97 | close |  |
        element = self.driver.find_element(By.CSS_SELECTOR, "h3")
        actions = ActionChains(self.driver)
        actions.double_click(element).perform()
        assert self.driver.find_element(By.CSS_SELECTOR, "h3").text == "IFrame Content Loaded"
        self.driver.close()

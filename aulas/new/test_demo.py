# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from wrapper import WrapperSelenium


class HomePageTemp:
    def login(self):
        self.driver.get("https://www.saucedemo.com/")
        self.driver.set_window_size(1024, 555)
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="username"]').click()
        self.driver.find_element(By.CSS_SELECTOR, ".login_credentials_wrap-inner").click()
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="username"]').click()
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="username"]').send_keys(
            "standard_user"
        )
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="login-password"]').click()
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="login-password"]').click()
        element = self.driver.find_element(By.CSS_SELECTOR, '*[data-test="login-password"]')
        actions = ActionChains(self.driver)
        actions.double_click(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="password"]').click()
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="password"]').send_keys(
            "secret_sauce"
        )
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="login-button"]').click()
        element = self.driver.find_element(By.CSS_SELECTOR, '*[data-test="login-button"]')

    def go_to_first_product(self):
        actions = ActionChains(self.driver)
        element = self.driver.find_element(By.CSS_SELECTOR, '*[data-test="login-password"]')
        actions.move_to_element(element).perform()
        self.driver.find_element(By.CSS_SELECTOR, '*[data-test="inventory-item-name"]').click()
        self.driver.find_element(By.CSS_SELECTOR, ".inventory_details_desc_container").click()
        elements = self.driver.find_elements(By.CSS_SELECTOR, '*[data-test="inventory-item-price"]')
        return elements

    def add_to_chart(self):
        pass


class LoginPage:

    def __init__(self, driver):
        self.driver = driver

    def authenticate(self):
        self.driver.goto("https://www.saucedemo.com")
        self.driver.fill_by_css_selector('*[data-test="username"]', "standard_user")
        self.driver.fill_by_css_selector('*[data-test="password"]', "secret_sauce")
        self.driver.click_by_css_selector('*[data-test="login-button"]')


from selenium import webdriver
from guara import it
from guara.transaction import Application, AbstractTransaction


class Authenticate(AbstractTransaction):
    def do(self):
        self._driver.goto("https://www.saucedemo.com")
        self._driver.fill_by_css_selector('*[data-test="username"]', "standard_user")
        self._driver.fill_by_css_selector('*[data-test="password"]', "secret_sauce")
        self._driver.click_by_css_selector('*[data-test="login-button"]')


class AddToCart(AbstractTransaction):
    def do(self):
        self._driver.click_by_css_selector('*[data-test="inventory-item-name"]')


class InspectCart(AbstractTransaction):
    def do(self, **kwargs):
        pass


class TestPom:

    def test_demo(self):
        driver = None
        hp = HomePageTemp(driver)
        hp.login()
        elements = hp.go_to_first_product()
        assert len(elements) > 0
        self.driver.close()

    def test_on_the_fly(self):
        driver = WrapperSelenium()
        login = LoginPage(driver)
        login.authenticate()


class TestDemo:
    def setup_method(self, method):
        self.driver = WrapperSelenium()
        self.sauce_demo = Application(self.driver)

    def teardown_method(self, method):
        self.driver.finish()

    # @pytest.fixture
    # def setup_test(self):
    #     driver = WrapperSelenium()
    #     sauce_demo = Application(driver)
    #     yield sauce_demo
    #     driver.quit()

    def test_add_to_cart(self):
        self.sauce_demo.when(Authenticate).when(AddToCart)

    def test_inspect_chart(self):
        self.sauce_demo.when(Authenticate).when(InspectCart)

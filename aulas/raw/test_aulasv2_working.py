# # Generated by Selenium IDE
# import pytest
# import time
# import json
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.action_chains import ActionChains
# from selenium.webdriver.support import expected_conditions
# from selenium.webdriver.support.wait import WebDriverWait
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


# class TestAulasv2:

#     def setup_method(self, method):
#         self.driver = webdriver.Chrome()
#         self.vars = {}

#     # def teardown_method(self, method):
#     #     self.driver.quit()

#     def wait_for_window(self, timeout=2):
#         time.sleep(round(timeout / 1000))
#         wh_now = self.driver.window_handles
#         wh_then = self.vars["window_handles"]
#         if len(wh_now) > len(wh_then):
#             return set(wh_now).difference(set(wh_then)).pop()

#     def test_aulasv2(self):
#         # Test name: aulasv2
#         # Step # | name | target | value
#         # 1 | open | /aulas/ |
#         # self.driver.get("https://douglasdcm.github.io/aulas/")
#         self.driver.get("file:///home/douglas/repo/automacao_de_testes/aulas/docs/index.html")
#         # 2 | setWindowSize | 970x555 |
#         self.driver.set_window_size(970, 555)
#         # 3 | click | id=username |
#         self.driver.find_element(By.ID, "username").click()
#         # 4 | type | id=username | any
#         self.driver.find_element(By.ID, "username").send_keys("any")
#         # 5 | type | id=password | anypass
#         self.driver.find_element(By.ID, "password").send_keys("anypass")
#         # 6 | type | id=email | any@any.com
#         self.driver.find_element(By.ID, "email").send_keys("any@any.com")
#         # 7 | type | id=bio | my bio
#         self.driver.find_element(By.ID, "bio").send_keys("my bio")
#         # 8 | select | id=country | label=United Kingdom
#         dropdown = self.driver.find_element(By.ID, "country")
#         dropdown.find_element(By.XPATH, "//option[. = 'United Kingdom']").click()
#         # 9 | mouseDownAt | id=country | -0.5,-0.921875
#         element = self.driver.find_element(By.ID, "country")
#         actions = ActionChains(self.driver)
#         actions.move_to_element(element).click_and_hold().perform()
#         # 10 | mouseMoveAt | id=country | -0.5,-0.921875
#         element = self.driver.find_element(By.ID, "country")
#         actions = ActionChains(self.driver)
#         actions.move_to_element(element).perform()
#         # 11 | mouseUpAt | id=country | -0.5,-0.921875
#         element = self.driver.find_element(By.ID, "country")
#         actions = ActionChains(self.driver)
#         actions.move_to_element(element).release().perform()
#         # 12 | type | id=age | 26
#         self.driver.find_element(By.ID, "age").send_keys("26")
#         # 13 | click | id=age |
#         self.driver.find_element(By.ID, "age").click()
#         # 14 | click | id=birthdate |
#         self.driver.find_element(By.ID, "birthdate").click()
#         # 15 | type | id=birthdate | 2025-07-06
#         self.driver.find_element(By.ID, "birthdate").send_keys("2025-07-06")
#         # 16 | click | id=submit-btn |
#         self.driver.find_element(By.ID, "submit-btn").click()
#         # 17 | assertAlert | Form would be submitted here |
#         alert = self.driver.switch_to.alert
#         assert self.driver.switch_to.alert.text == "Form would be submitted here"
#         alert.accept()
#         # 18 | click | id=interest-tech |
#         self.driver.find_element(By.ID, "interest-tech").click()
#         # 19 | click | id=interest-sports |
#         self.driver.find_element(By.ID, "interest-sports").click()
#         # 20 | click | id=interest-music |
#         self.driver.find_element(By.ID, "interest-music").click()
#         # 21 | click | id=gender-female |
#         self.driver.find_element(By.ID, "gender-female").click()
#         # 22 | click | id=terms |
#         self.driver.find_element(By.ID, "terms").click()
#         # 23 | click | id=simple-btn |
#         self.driver.find_element(By.ID, "simple-btn").click()
#         # 24 | assertAlert | Simple button was clicked! |
#         assert self.driver.switch_to.alert.text == "Simple button was clicked!"
#         self.driver.switch_to.alert.accept()
#         # 25 | click | id=alert-btn |
#         self.driver.find_element(By.ID, "alert-btn").click()
#         # 26 | assertAlert | This is a JavaScript alert! |
#         assert self.driver.switch_to.alert.text == "This is a JavaScript alert!"
#         self.driver.switch_to.alert.accept()
#         # 28 | click | id=confirm-btn |
#         self.driver.find_element(By.ID, "confirm-btn").click()
#         # 29 | assertConfirmation | Do you want to proceed? |
#         assert self.driver.switch_to.alert.text == "Do you want to proceed?"
#         # 30 | webdriverChooseOkOnVisibleConfirmation |  |
#         self.driver.switch_to.alert.accept()
#         # 31 | assertAlert | You clicked: OK |
#         assert self.driver.switch_to.alert.text == "You clicked: OK"
#         self.driver.switch_to.alert.accept()
#         # 33 | click | id=prompt-btn |
#         self.driver.find_element(By.ID, "prompt-btn").click()
#         # 34 | assertPrompt | Please enter your name: |
#         assert self.driver.switch_to.alert.text == "Please enter your name:"
#         # 35 | webdriverAnswerOnVisiblePrompt | other name |
#         alert = self.driver.switch_to.alert
#         alert.send_keys("other name")
#         alert.accept()
#         # 36 | assertAlert | Hello, other name! |
#         assert self.driver.switch_to.alert.text == "Hello, other name!"
#         self.driver.switch_to.alert.accept()
#         # 37 | click | id=new-tab-btn |
#         self.vars["window_handles"] = self.driver.window_handles
#         # 38 | storeWindowHandle | root |
#         self.driver.find_element(By.ID, "new-tab-btn").click()
#         # 39 | selectWindow | handle=${win379} |
#         self.vars["win379"] = self.wait_for_window(2000)
#         # 40 | close |  |
#         self.vars["root"] = self.driver.current_window_handle
#         # 41 | selectWindow | handle=${root} |
#         self.driver.switch_to.window(self.vars["win379"])
#         # 42 | click | css=.btn-style:nth-child(1) |
#         self.driver.close()
#         # 43 | click | css=.btn-style:nth-child(2) |
#         self.driver.switch_to.window(self.vars["root"])
#         # 44 | click | css=.btn-style:nth-child(3) |
#         self.driver.find_element(By.CSS_SELECTOR, ".btn-style:nth-child(1)").click()
#         # 45 | click | id=show-hidden-btn |
#         self.driver.find_element(By.CSS_SELECTOR, ".btn-style:nth-child(2)").click()
#         # 46 | click | id=hidden-element |
#         self.driver.find_element(By.CSS_SELECTOR, ".btn-style:nth-child(3)").click()
#         # 47 | assertText | id=hidden-element | This element was hidden and now is visible!
#         self.driver.find_element(By.ID, "show-hidden-btn").click()
#         # 48 | click | id=show-hidden-btn |
#         self.driver.find_element(By.ID, "hidden-element").click()
#         # 49 | click | id=add-element-btn |
#         assert (
#             self.driver.find_element(By.ID, "hidden-element").text
#             == "This element was hidden and now is visible!"
#         )
#         # 50 | click | css=.form-section:nth-child(5) |
#         self.driver.find_element(By.ID, "show-hidden-btn").click()
#         # 51 | assertText | css=div:nth-child(1) | New element added at 10:54:27 PM
#         self.driver.find_element(By.ID, "add-element-btn").click()
#         # 52 | click | id=change-text-btn |
#         self.driver.find_element(By.CSS_SELECTOR, ".form-section:nth-child(5)").click()
#         # 53 | click | id=change-text-btn |
#         assert (
#             "New element added at "
#             in self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1)").text
#         )
#         # 54 | click | id=changeable-text |
#         self.driver.find_element(By.ID, "change-text-btn").click()
#         # 55 | assertText | id=changeable-text | Text changed at 10:54:42 PM
#         self.driver.find_element(By.ID, "change-text-btn").click()
#         # 56 | click | id=toggle-class-btn |
#         self.driver.find_element(By.ID, "changeable-text").click()
#         # 57 | click | id=toggle-class-btn |
#         assert "Text changed at" in self.driver.find_element(By.ID, "changeable-text").text
#         # 58 | click | css=.form-section:nth-child(5) |
#         self.driver.find_element(By.ID, "toggle-class-btn").click()
#         # 59 | assertText | id=class-toggle-element | This element will change color when class is toggled
#         self.driver.find_element(By.ID, "toggle-class-btn").click()
#         # 60 | click | id=toggle-class-btn |
#         self.driver.find_element(By.CSS_SELECTOR, ".form-section:nth-child(5)").click()
#         # 61 | click | id=class-toggle-element |
#         assert (
#             self.driver.find_element(By.ID, "class-toggle-element").text
#             == "This element will change color when class is toggled"
#         )
#         # 62 | click | id=class-toggle-element |
#         self.driver.find_element(By.ID, "toggle-class-btn").click()
#         # 63 | assertText | id=class-toggle-element | This element will change color when class is toggled
#         self.driver.find_element(By.ID, "class-toggle-element").click()
#         # 64 | click | id=ajax-btn |
#         self.driver.find_element(By.ID, "class-toggle-element").click()
#         # 65 | click | id=ajax-content |
#         assert (
#             self.driver.find_element(By.ID, "class-toggle-element").text
#             == "This element will change color when class is toggled"
#         )
#         # 66 | assertText | id=ajax-content | AJAX content loaded at 10:55:39 PM
#         self.driver.find_element(By.ID, "ajax-btn").click()
#         # 67 | select | id=simple-dropdown | label=Option 1
#         self.driver.find_element(By.ID, "ajax-content").click()
#         # 68 | addSelection | id=multi-select | label=Red
#         WebDriverWait(self.driver, 10).until(
#             expected_conditions.text_to_be_present_in_element(
#                 (By.ID, "ajax-content"), "AJAX content loaded at"
#             )
#         )
#         assert "AJAX content loaded" in self.driver.find_element(By.ID, "ajax-content").text
#         # 69 | removeSelection | id=multi-select | label=Red
#         dropdown = self.driver.find_element(By.ID, "simple-dropdown")
#         dropdown.find_element(By.XPATH, "//option[. = 'Option 1']").click()
#         # 70 | addSelection | id=multi-select | label=Blue
#         dropdown = self.driver.find_element(By.ID, "multi-select")
#         dropdown.find_element(By.XPATH, "//option[. = 'Red']").click()
#         # 71 | addSelection | id=multi-select | label=Red
#         dropdown = self.driver.find_element(By.ID, "multi-select")
#         dropdown.find_element(By.XPATH, "//option[. = 'Red']").click()
#         # 72 | select | id=simple-dropdown | label=Option 2
#         dropdown = self.driver.find_element(By.ID, "multi-select")
#         dropdown.find_element(By.XPATH, "//option[. = 'Blue']").click()
#         # 73 | click | css=.form-section:nth-child(6) |
#         dropdown = self.driver.find_element(By.ID, "multi-select")
#         dropdown.find_element(By.XPATH, "//option[. = 'Red']").click()
#         # 74 | click | css=.form-section:nth-child(6) |
#         dropdown = self.driver.find_element(By.ID, "simple-dropdown")
#         dropdown.find_element(By.XPATH, "//option[. = 'Option 2']").click()
#         # 75 | click | id=add-option-btn |
#         self.driver.find_element(By.CSS_SELECTOR, ".form-section:nth-child(6)").click()
#         # 76 | click | id=add-option-btn |
#         self.driver.find_element(By.CSS_SELECTOR, ".form-section:nth-child(6)").click()
#         # 77 | select | id=dynamic-dropdown | label=Dynamic Option 2
#         self.driver.find_element(By.ID, "add-option-btn").click()
#         # 78 | click | id=add-row-btn |
#         self.driver.find_element(By.ID, "add-option-btn").click()
#         # 79 | click | css=tr:nth-child(4) > td:nth-child(2) |
#         dropdown = self.driver.find_element(By.ID, "dynamic-dropdown")
#         dropdown.find_element(By.XPATH, "//option[. = 'Dynamic Option 2']").click()
#         # 80 | assertText | css=tr:nth-child(4) > td:nth-child(2) | New User 4
#         self.driver.find_element(By.ID, "add-row-btn").click()
#         # 81 | click | id=remove-row-btn |
#         self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").click()
#         # 82 | click | css=.tooltip |
#         assert (
#             self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(4) > td:nth-child(2)").text
#             == "New User 4"
#         )
#         # 83 | click | css=.tooltip |
#         self.driver.find_element(By.ID, "remove-row-btn").click()
#         # 84 | assertText | css=.tooltip | Hover over me\nThis is a tooltip
#         self.driver.find_element(By.CSS_SELECTOR, ".tooltip").click()
#         # 85 | click | id=show-popover-btn |
#         self.driver.find_element(By.CSS_SELECTOR, ".tooltip").click()
#         # 86 | click | id=popover-content |
#         assert "This is a tooltip" in self.driver.find_element(By.CSS_SELECTOR, ".tooltip").text
#         # 87 | assertText | id=popover-content | This is a popover content that appears when the button is clicked.
#         self.driver.find_element(By.ID, "show-popover-btn").click()
#         # 88 | click | id=show-popover-btn |
#         self.driver.find_element(By.ID, "popover-content").click()
#         # 89 | click | id=file-upload |
#         assert (
#             self.driver.find_element(By.ID, "popover-content").text
#             == "This is a popover content that appears when the button is clicked."
#         )
#         # 90 | type | id=file-upload | C:\fakepath\email.txt
#         self.driver.find_element(By.ID, "show-popover-btn").click()
#         # 91 | click | id=multi-file-upload |
#         # time.sleep(1000)  # Wait for the popover to appear
#         # self.driver.find_element(By.ID, "file-upload").click()
#         # 92 | type | id=multi-file-upload | C:\fakepath\UTF8demo.txt
#         self.driver.find_element(By.ID, "file-upload").send_keys(
#             "/home/douglas/repo/automacao_de_testes/aulas/email.txt"
#         )
#         # 93 | mouseDownAt | id=file-upload | 144.5,15.828125
#         # self.driver.find_element(By.ID, "multi-file-upload").click()
#         # 94 | mouseMoveAt | id=file-upload | 144.5,15.828125
#         self.driver.find_element(By.ID, "multi-file-upload").send_keys(
#             "/home/douglas/repo/automacao_de_testes/aulas/UTF8demo.txt"
#         )
#         # 95 | mouseUpAt | id=file-upload | 144.5,15.828125
#         # element = self.driver.find_element(By.ID, "file-upload")
#         # actions = ActionChains(self.driver)
#         # actions.move_to_element(element).click_and_hold().perform()
#         # # 96 | click | id=file-upload |
#         # element = self.driver.find_element(By.ID, "file-upload")
#         # actions = ActionChains(self.driver)
#         # actions.move_to_element(element).perform()
#         # # 97 | //type | id=file-upload |
#         # element = self.driver.find_element(By.ID, "file-upload")
#         # actions = ActionChains(self.driver)
#         # actions.move_to_element(element).release().perform()
#         # # 98 | click | id=file-upload |
#         # self.driver.find_element(By.ID, "file-upload").click()
#         # # 100 | click | id=load-iframe-btn |
#         # self.driver.find_element(By.ID, "file-upload").click()
#         # # 101 | selectFrame | index=0 |
#         self.driver.find_element(By.ID, "multi-file-upload").send_keys(
#             "/home/douglas/repo/automacao_de_testes/aulas/email.txt"
#         )
#         # 102 | click | css=h3 |
#         self.driver.find_element(By.ID, "load-iframe-btn").click()
#         # 103 | assertText | css=h3 | IFrame Content Loaded
#         self.driver.switch_to.frame(0)
#         # 104 | click | css=button |
#         self.driver.find_element(By.CSS_SELECTOR, "h3").click()
#         # 105 | assertAlert | Button inside iframe clicked! |
#         assert self.driver.find_element(By.CSS_SELECTOR, "h3").text == "IFrame Content Loaded"
#         # 106 | close |  |
#         self.driver.find_element(By.CSS_SELECTOR, "button").click()
#         assert self.driver.switch_to.alert.text == "Button inside iframe clicked!"
#         self.driver.switch_to.alert.accept()
#         time.sleep(10000)
#         # self.driver.close()
